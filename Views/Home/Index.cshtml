@model Dictionary<int, List<Consumer.Models.VideoUpload>>
@{
    ViewData["Title"] = "Video Consumer";
}

<div class="container">
    <div class="row mb-4">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h2>Video Consumer Dashboard</h2>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="alert alert-info">
                                <h4>Queue Status</h4>
                                <p>Videos in Queue: <span id="queueCount">@ViewBag.QueueCount</span> / <span id="queueLimit">@ViewBag.QueueLimit</span></p>
                                <div class="progress">
                                    <div class="progress-bar" role="progressbar" style="width: @(ViewBag.QueueCount * 100 / (ViewBag.QueueLimit > 0 ? ViewBag.QueueLimit : 1))%"></div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="alert alert-success">
                                <h4>Upload Status</h4>
                                <p>Total Videos: <span id="videoCount">@Model.Values.SelectMany(v => v).Count()</span></p>
                                <p>Last Upload: <span id="lastUpload">@(Model.Values.SelectMany(v => v).Any() ? Model.Values.SelectMany(v => v).Max(v => v.UploadTime).ToString("g") : "None")</span></p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @foreach (var consumerGroup in Model)
    {
        <div class="row mb-4">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header bg-secondary text-white">
                        <h3>Consumer @consumerGroup.Key Videos</h3>
                    </div>
                    <div class="card-body">
                        <div class="row video-grid">
                            @foreach (var video in consumerGroup.Value)
                            {
                                <div class="col-md-10 mb-4">
                                    <div class="card video-card" data-video-id="@video.Id">
                                        <div class="card-img-top video-preview">
                                            <video 
                                                src="/video/@video.Id" 
                                                preload="auto"
                                                muted
                                                playsinline>
                                                Your browser does not support video playback.
                                            </video>
                                            <div class="hover-play-icon">
                                                <i class="bi bi-play-circle-fill"></i>
                                            </div>
                                        </div>
                                        <div class="card-body">
                                            <h5 class="card-title">@(string.IsNullOrEmpty(video.Metadata?.FileName) ? $"Video {video.Id}" : video.Metadata.FileName)</h5>
                                            <p class="card-text">
                                                <small class="text-muted">
                                                    @if (video.Metadata != null)
                                                    {
                                                        <span>Size: @(video.Metadata.FileSize / 1024) KB<br /></span>
                                                    }
                                                    <span>Uploaded: @video.UploadTime.ToString("g")</span>
                                                </small>
                                            </p>
                                            <button class="btn btn-primary btn-sm play-btn">
                                                <i class="bi bi-play-fill"></i> Play
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                        
                        @if (!consumerGroup.Value.Any())
                        {
                            <div class="alert alert-warning">
                                <p>No videos have been processed by Consumer @consumerGroup.Key yet.</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
    
    @if (!Model.Any())
    {
        <div class="row">
            <div class="col-md-12">
                <div class="alert alert-warning" id="noVideosMessage">
                    <p>No videos have been uploaded yet. Videos will appear here when producers upload them.</p>
                </div>
            </div>
        </div>
    }
</div>

<!-- Video Player Modal -->
<div class="modal fade" id="videoPlayerModal" tabindex="-1" aria-labelledby="videoPlayerModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="videoPlayerModalLabel">Video Player</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <video id="modalVideoPlayer" class="w-100" controls>
                    Your browser does not support video playback.
                </video>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/signalr/dist/browser/signalr.js"></script>
    <script src="~/js/site.js"></script>
    <script>
        // Inline script to handle video hover events
        document.addEventListener('DOMContentLoaded', function() {
            console.log("INLINE SCRIPT: DOM loaded");
            
            // Direct event handlers for each video card
            const videoCards = document.querySelectorAll('.video-card');
            console.log("INLINE SCRIPT: Found " + videoCards.length + " video cards");
            
            videoCards.forEach(function(card) {
                console.log("INLINE SCRIPT: Setting up card", card);
                
                // Get the video element
                const video = card.querySelector('video');
                if (!video) {
                    console.log("INLINE SCRIPT: No video found in card");
                    return;
                }
                
                console.log("INLINE SCRIPT: Found video", video);
                
                // Preload the video
                video.load();
                
                // Add mouseenter event
                card.addEventListener('mouseenter', function() {
                    console.log("INLINE SCRIPT: Mouse entered card");
                    video.currentTime = 0;
                    video.muted = true;
                    
                    // Play the video
                    const playPromise = video.play();
                    if (playPromise !== undefined) {
                        playPromise.then(_ => {
                            console.log("INLINE SCRIPT: Video playing successfully");
                        }).catch(error => {
                            console.error("INLINE SCRIPT: Error playing video", error);
                        });
                    }
                    
                    // Stop after 10 seconds
                    setTimeout(function() {
                        if (!video.paused) {
                            console.log("INLINE SCRIPT: 10 seconds reached, pausing");
                            video.pause();
                        }
                    }, 10000);
                });
                
                // Add mouseleave event
                card.addEventListener('mouseleave', function() {
                    console.log("INLINE SCRIPT: Mouse left card");
                    video.pause();
                    video.currentTime = 0;
                });
            });
            
            // Handle play button clicks
            document.querySelectorAll('.play-btn').forEach(function(btn) {
                btn.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    
                    const card = this.closest('.video-card');
                    const videoId = card.dataset.videoId;
                    const title = card.querySelector('.card-title').textContent;
                    
                    console.log("INLINE SCRIPT: Play button clicked for", videoId);
                    
                    // Set modal content
                    document.getElementById('videoPlayerModalLabel').textContent = title;
                    document.getElementById('modalVideoPlayer').src = '/video/' + videoId;
                    
                    // Show modal
                    const modal = new bootstrap.Modal(document.getElementById('videoPlayerModal'));
                    modal.show();
                });
            });
        });
    </script>
}

@section Styles {
    <style>
        .video-card {
            cursor: pointer;
            transition: transform 0.2s;
            width: 100%;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            height: 100%;
            display: flex;
            flex-direction: column;
        }
        
        .video-card:hover {
            transform: scale(1.03);
            box-shadow: 0 8px 16px rgba(0,0,0,0.2);
        }
        
        .video-preview {
            position: relative;
            height: 240px;
            background-color: #000;
            overflow: hidden;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .video-preview video {
            width: 100%;
            height: 100%;
            object-fit: contain;
        }
        
        .hover-play-icon {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 4rem;
            color: rgba(255, 255, 255, 0.8);
            opacity: 0;
            transition: opacity 0.3s;
        }
        
        .video-card:hover .hover-play-icon {
            opacity: 1;
        }
        
        .card-body {
            flex: 1;
            display: flex;
            flex-direction: column;
        }
        
        .card-text {
            flex: 1;
        }
        
        .progress {
            height: 10px;
            margin-top: 5px;
        }
        
        .progress-bar {
            background-color: #28a745;
        }
    </style>
}
